package tasks;

import java.io.BufferedReader;

import boxes.GenericContainer;
import factories.HandlerFactory;
import factories.ParserFactory;
import factories.ValidatorFactory;
import math.Fibonacci;
import taskFrameWork.backbone.Task;

/**
 * 

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

 * @author hdaiv_000
 *
 */
public class T002_EvenFibonacci extends Task 
{	
	@SuppressWarnings("javadoc")
	public T002_EvenFibonacci(BufferedReader br) {
		super(br);
		this.setName("Even Fibonaccis");
		this.setInfo("Adds all Fibonaccinumbers (<Boundary)");
		this.setPrint();
		this.addInput(HF -> HF.chooseHandlerType(HandlerFactory.CONSOLEHANDLER)
						.setParser(ParserFactory.PARSE_TO_INTEGER)
						.setValidator(ValidatorFactory.VALID_GT,0)
						.setReader(this.br)
						.setUserprompt("Obergrenze: ")
						.build());		
	}

	@Override
	protected GenericContainer<?> compute() {
		Fibonacci fib = new Fibonacci();
		int sum = 0;
		int i = 0;
		int curr;
		while(true) {
			curr = fib.getNumber(i++);
			if(curr % 2 == 0) {
				sum += curr;
			}
			if(curr > this.<Integer>getValue(0)) {
				break;
			}
		}		
		return new GenericContainer<Integer>(sum);
	}

	@Override
	protected void buildOutput() {
		this.addAnswer(String.format("Summe der gefunden Fibonumbers: %s", this.<Integer>getReturnValue()));		
	}

}
